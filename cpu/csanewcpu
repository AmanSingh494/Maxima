<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="csanewcpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="op" type="required" numBits="4" relativity="absolute" signed="true" defaultValue="0" id="model.Field553ac1a9">
	</Field>
	<Field name="op16" type="required" numBits="16" relativity="absolute" signed="true" defaultValue="0" id="model.Field300d8c19">
	</Field>
	<Field name="addr" type="required" numBits="12" relativity="absolute" signed="true" defaultValue="0" id="model.Field7e421c95">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="ac" width="16" initialValue="0" readOnly="false" id="model.module.Register3783f8f1" />
	<Register name="ar" width="16" initialValue="0" readOnly="false" id="model.module.Register3e49143a" />
	<Register name="dr" width="16" initialValue="0" readOnly="false" id="model.module.Register54f7e0ca" />
	<Register name="e" width="1" initialValue="0" readOnly="false" id="model.module.Register4baa6777" />
	<Register name="fgi" width="1" initialValue="0" readOnly="false" id="model.module.Register63464a83" />
	<Register name="fgo" width="1" initialValue="0" readOnly="false" id="model.module.Register15d86a15" />
	<Register name="i" width="1" initialValue="0" readOnly="false" id="model.module.Register7e4229d4" />
	<Register name="inpr" width="8" initialValue="0" readOnly="false" id="model.module.Register664b68b4" />
	<Register name="ir" width="16" initialValue="0" readOnly="false" id="model.module.Register370834ac" />
	<Register name="outr" width="8" initialValue="0" readOnly="false" id="model.module.Registere35e1ed" />
	<Register name="pc" width="12" initialValue="0" readOnly="false" id="model.module.Register33862657" />
	<Register name="s" width="1" initialValue="0" readOnly="false" id="model.module.Register45ddc9df" />
	<Register name="tr" width="16" initialValue="0" readOnly="false" id="model.module.Register171d6b46" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="carrybit" bit="0" register="model.module.Register4baa6777" halt="false" id="model.module.ConditionBit3686cac1" />
	<ConditionBit name="halt" bit="0" register="model.module.Register45ddc9df" halt="true" id="model.module.ConditionBit34b0e6d8" />

	<!--............. rams ..........................-->
	<RAM name="main" length="4096" cellSize="16" id="model.module.RAM1f8852a0" />

	<!--............. set ...........................-->
	<Set name="ac&lt;-0" register="model.module.Register3783f8f1" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet50d6ffab" />
	<Set name="e&lt;-0" register="model.module.Register4baa6777" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSetd96ba43" />
	<Set name="fgi&lt;-0" register="model.module.Register63464a83" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet74b64f90" />
	<Set name="fgo&lt;-0" register="model.module.Register15d86a15" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSetd3530a4" />
	<Set name="s&lt;-0" register="model.module.Register45ddc9df" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet6af9ad0e" />

	<!--............. test ..........................-->
	<Test name="if(ac(15)=0)" register="model.module.Register3783f8f1" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test520546b0" />
	<Test name="if(ac(15)=1)" register="model.module.Register3783f8f1" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test148959af" />
	<Test name="if(ac=0)" register="model.module.Register3783f8f1" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test301deb8a" />
	<Test name="if(dr=0)" register="model.module.Register54f7e0ca" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test172bb15a" />

	<!--............. increment .....................-->
	<Increment name="ac&lt;ac+1" register="model.module.Register3783f8f1" delta="1" id="model.microinstruction.Increment6fe345c9" />
	<Increment name="ar&lt;ar+1" register="model.module.Register3e49143a" delta="1" id="model.microinstruction.Increment31793dbb" />
	<Increment name="dr&lt;dr+1" register="model.module.Register54f7e0ca" delta="1" id="model.microinstruction.Increment6e67c1a5" />
	<Increment name="pc&lt;-pc+1" register="model.module.Register33862657" delta="1" id="model.microinstruction.Increment248c0c52" />

	<!--............. shift .........................-->
	<Shift name="shl ac" type="cyclic" source="model.module.Register3783f8f1" destination="model.module.Register3783f8f1" direction="left" distance="1" id="model.microinstruction.Shift79e22518" />
	<Shift name="shr ac" type="cyclic" source="model.module.Register3783f8f1" destination="model.module.Register3783f8f1" direction="right" distance="1" id="model.microinstruction.Shift3d4858ea" />

	<!--............. logical .......................-->
	<Logical name="ac &lt;- ac nor dr" type="NOR" source1="model.module.Register3783f8f1" source2="model.module.Register54f7e0ca" destination="model.module.Register3783f8f1" id="model.microinstruction.Logical4e467178" />
	<Logical name="ac &lt;- ac or dr" type="OR" source1="model.module.Register3783f8f1" source2="model.module.Register54f7e0ca" destination="model.module.Register3783f8f1" id="model.microinstruction.Logical31b6ef52" />
	<Logical name="ac &lt;- ac xor dr" type="XOR" source1="model.module.Register3783f8f1" source2="model.module.Register54f7e0ca" destination="model.module.Register3783f8f1" id="model.microinstruction.Logical21b0142b" />
	<Logical name="ac &lt;- ac'" type="NOT" source1="model.module.Register3783f8f1" source2="model.module.Register3783f8f1" destination="model.module.Register3783f8f1" id="model.microinstruction.Logical258234c6" />
	<Logical name="ac &lt;- ac^dr" type="AND" source1="model.module.Register3783f8f1" source2="model.module.Register54f7e0ca" destination="model.module.Register3783f8f1" id="model.microinstruction.Logical58b24cbf" />
	<Logical name="e &lt;- e'" type="NOT" source1="model.module.Register4baa6777" source2="model.module.Register4baa6777" destination="model.module.Register4baa6777" id="model.microinstruction.Logical5e78e484" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="ac &lt;- ac+dr" type="ADD" source1="model.module.Register3783f8f1" source2="model.module.Register54f7e0ca" destination="model.module.Register3783f8f1" carryBit="model.module.ConditionBit3686cac1" id="model.microinstruction.Arithmetic7f48a22c" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="ac(0)&lt;-e" source="model.module.Register4baa6777" srcStartBit="0" dest="model.module.Register3783f8f1" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR4b589d07" />
	<TransferRtoR name="ac(0-7) &lt;- inpr" source="model.module.Register664b68b4" srcStartBit="0" dest="model.module.Register3783f8f1" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR1c5e767" />
	<TransferRtoR name="ac(15) &lt;- e" source="model.module.Register4baa6777" srcStartBit="0" dest="model.module.Register3783f8f1" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR18806f1f" />
	<TransferRtoR name="ac&lt;-ar" source="model.module.Register3e49143a" srcStartBit="0" dest="model.module.Register3783f8f1" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR2263e7e1" />
	<TransferRtoR name="ac&lt;-dr" source="model.module.Register54f7e0ca" srcStartBit="0" dest="model.module.Register3783f8f1" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR2ddcf60f" />
	<TransferRtoR name="ar&lt;-ir (0-11)" source="model.module.Register370834ac" srcStartBit="0" dest="model.module.Register3e49143a" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR38cd20c" />
	<TransferRtoR name="ar&lt;-pc" source="model.module.Register33862657" srcStartBit="0" dest="model.module.Register3e49143a" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR18efadf5" />
	<TransferRtoR name="e &lt;- ac(0)" source="model.module.Register3783f8f1" srcStartBit="0" dest="model.module.Register4baa6777" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR258e1de6" />
	<TransferRtoR name="e &lt;- ac(15)" source="model.module.Register3783f8f1" srcStartBit="15" dest="model.module.Register4baa6777" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoRad1488d" />
	<TransferRtoR name="outr &lt;- ac(0-7)" source="model.module.Register3783f8f1" srcStartBit="0" dest="model.module.Registere35e1ed" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR6f34cc27" />
	<TransferRtoR name="pc &lt;-ar" source="model.module.Register3e49143a" srcStartBit="0" dest="model.module.Register33862657" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR3a008d0a" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="decode-ir" ir="model.module.Register370834ac" id="model.microinstruction.Decode125e37d7" />

	<!--............. set condition bit .............-->
	<SetCondBit name="halt" bit="model.module.ConditionBit34b0e6d8" value="1" id="model.microinstruction.SetCondBit124b9031" />

	<!--............. io ............................-->
	<IO name="input" direction="input" type="integer" buffer="model.module.Register3783f8f1" connection="[Console]" id="model.microinstruction.IO5bd733ab" />
	<IO name="output" direction="output" type="integer" buffer="model.module.Register3783f8f1" connection="[Console]" id="model.microinstruction.IO65819d06" />

	<!--............. memory access .................-->
	<MemoryAccess name="dr &lt;- m[ar]" direction="read" memory="model.module.RAM1f8852a0" data="model.module.Register54f7e0ca" address="model.module.Register3e49143a" id="model.microinstruction.MemoryAccess602eeee" />
	<MemoryAccess name="ir &lt;- m[ar]" direction="read" memory="model.module.RAM1f8852a0" data="model.module.Register370834ac" address="model.module.Register3e49143a" id="model.microinstruction.MemoryAccess48862c07" />
	<MemoryAccess name="m[ar] &lt;- ac" direction="write" memory="model.module.RAM1f8852a0" data="model.module.Register3783f8f1" address="model.module.Register3e49143a" id="model.microinstruction.MemoryAccess2aae14d7" />
	<MemoryAccess name="m[ar] &lt;- dr" direction="write" memory="model.module.RAM1f8852a0" data="model.module.Register54f7e0ca" address="model.module.Register3e49143a" id="model.microinstruction.MemoryAccess432ec529" />
	<MemoryAccess name="m[ar] &lt;- pc" direction="write" memory="model.module.RAM1f8852a0" data="model.module.Register33862657" address="model.module.Register3e49143a" id="model.microinstruction.MemoryAccess52ca263c" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End2bd5ce76" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR18efadf5" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess48862c07" />
		<Microinstruction microRef="model.microinstruction.Increment248c0c52" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR38cd20c" />
		<Microinstruction microRef="model.microinstruction.Decode125e37d7" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="isz" opcode="6" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#8eddcd #c5b38f" assemblyColors="#8eddcd #c5b38f" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess602eeee" />
		<Microinstruction microRef="model.microinstruction.Increment6e67c1a5" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess432ec529" />
		<Microinstruction microRef="model.microinstruction.Test172bb15a" />
		<Microinstruction microRef="model.microinstruction.Increment248c0c52" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="sza" opcode="7004" instructionFormat="op16" assemblyFormat="op16" instructionColors="#dc8b9b" assemblyColors="#dc8b9b" >
		<Microinstruction microRef="model.microinstruction.Test301deb8a" />
		<Microinstruction microRef="model.microinstruction.Increment248c0c52" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="spa" opcode="5" instructionFormat="op16" assemblyFormat="op16" instructionColors="#86a7f6" assemblyColors="#86a7f6" >
		<Microinstruction microRef="model.microinstruction.Test148959af" />
		<Microinstruction microRef="model.microinstruction.Increment248c0c52" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="lda" opcode="2" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#82f1a4 #eb97e8" assemblyColors="#82f1a4 #eb97e8" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess602eeee" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR2ddcf60f" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="bun" opcode="4" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#a9b08f #ad8ccc" assemblyColors="#a9b08f #ad8ccc" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR3a008d0a" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="sna" opcode="7010" instructionFormat="op16" assemblyFormat="op16" instructionColors="#86a7f6" assemblyColors="#86a7f6" >
		<Microinstruction microRef="model.microinstruction.Test520546b0" />
		<Microinstruction microRef="model.microinstruction.Increment248c0c52" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="inc" opcode="7020" instructionFormat="op16" assemblyFormat="op16" instructionColors="#9ba1e2" assemblyColors="#9ba1e2" >
		<Microinstruction microRef="model.microinstruction.Increment6fe345c9" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="sta" opcode="3" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#9483e0 #88cbd2" assemblyColors="#9483e0 #88cbd2" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess2aae14d7" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="and" opcode="0" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#a5cfe8 #d6858a" assemblyColors="#a5cfe8 #d6858a" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess602eeee" />
		<Microinstruction microRef="model.microinstruction.Logical58b24cbf" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="1" instructionFormat="op addr" assemblyFormat="op addr" instructionColors="#df85a0 #d3e2e7" assemblyColors="#df85a0 #d3e2e7" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess602eeee" />
		<Microinstruction microRef="model.microinstruction.Arithmetic7f48a22c" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="hlt" opcode="7001" instructionFormat="op16" assemblyFormat="op16" instructionColors="#c0d397" assemblyColors="#c0d397" >
		<Microinstruction microRef="model.microinstruction.SetCondBit124b9031" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="out" opcode="f400" instructionFormat="op16" assemblyFormat="op16" instructionColors="#889bb5" assemblyColors="#889bb5" >
		<Microinstruction microRef="model.microinstruction.IO65819d06" />
		<Microinstruction microRef="model.microinstruction.CpusimSetd3530a4" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="inp" opcode="f800" instructionFormat="op16" assemblyFormat="op16" instructionColors="#a0b397" assemblyColors="#a0b397" >
		<Microinstruction microRef="model.microinstruction.IO5bd733ab" />
		<Microinstruction microRef="model.microinstruction.CpusimSet74b64f90" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="cla" opcode="7800" instructionFormat="op16" assemblyFormat="op16" instructionColors="#ac8a85" assemblyColors="#ac8a85" >
		<Microinstruction microRef="model.microinstruction.CpusimSet50d6ffab" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="cme" opcode="7100" instructionFormat="op16" assemblyFormat="op16" instructionColors="#9eef96" assemblyColors="#9eef96" >
		<Microinstruction microRef="model.microinstruction.Logical5e78e484" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<MachineInstruction name="cma" opcode="7200" instructionFormat="op16" assemblyFormat="op16" instructionColors="#d196ee" assemblyColors="#d196ee" >
		<Microinstruction microRef="model.microinstruction.Logical258234c6" />
		<Microinstruction microRef="model.microinstruction.End2bd5ce76" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM1f8852a0" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
